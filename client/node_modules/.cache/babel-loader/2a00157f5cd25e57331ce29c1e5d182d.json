{"ast":null,"code":"/* Возвращает строку в формате DD.MM.YYYY из объекта Date*/\nexport const getStringFromDate = date => {\n  const day = ('00' + String(date.getDate())).slice(-2);\n  const month = ('00' + String(date.getMonth() + 1)).slice(-2);\n  const year = ('0000' + String(date.getFullYear())).slice(-4);\n  return `${day}.${month}.${year}`;\n};\n/* Возвращает объект Date из строки в формате DD.MM.YYYY */\n\nexport const getDateFromString = str => {\n  const day = Number(str.slice(0, 2));\n  const month = Number(str.slice(3, 5));\n  const year = Number(str.slice(6));\n  return new Date(year, month, day);\n};\n/* Возвращает массив с числами от start до end с шагом dif\r\n* dif должен быть больше 0 */\n\nexport const getRange = function (end) {\n  let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let dif = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (dif <= 0) throw Error(\"dif должен быть больше 0\");\n  const range = [];\n\n  for (let i = start; i < end; i += dif) {\n    range.push(i);\n  }\n\n  return range;\n};\n/* Возвращает true, если строка является датой в формате DD.MM.YYYY */\n\nexport const checkDateFormat = date => {\n  return date.length === 10 && date[2] === '.' && date[5] === '.' && !isNaN(Number(date.slice(0, 2))) && !isNaN(Number(date.slice(3, 5))) && !isNaN(Number(date.slice(6))) && Number(date.slice(0, 2)) >= 0 && Number(date.slice(3, 5)) >= 0 && Number(date.slice(6)) >= 0 && Number(date.slice(0, 2)) <= 31 && Number(date.slice(3, 5)) <= 12;\n};","map":{"version":3,"names":["getStringFromDate","date","day","String","getDate","slice","month","getMonth","year","getFullYear","getDateFromString","str","Number","Date","getRange","end","start","dif","Error","range","i","push","checkDateFormat","length","isNaN"],"sources":["D:/Programming/Тестовые задания/kanalservis/client/src/utils/index.ts"],"sourcesContent":["/* Возвращает строку в формате DD.MM.YYYY из объекта Date*/\r\nexport const getStringFromDate = (date: Date): string => {\r\n    const day = ('00' + String(date.getDate())).slice(-2);\r\n    const month = ('00' + String(date.getMonth() + 1)).slice(-2);\r\n    const year = ('0000' + String(date.getFullYear())).slice(-4);\r\n    return `${day}.${month}.${year}`;\r\n}\r\n\r\n/* Возвращает объект Date из строки в формате DD.MM.YYYY */\r\nexport const getDateFromString = (str: string): Date => {\r\n    const day = Number(str.slice(0, 2));\r\n    const month = Number(str.slice(3, 5));\r\n    const year = Number(str.slice(6));\r\n    return new Date(year, month, day);\r\n}\r\n\r\n/* Возвращает массив с числами от start до end с шагом dif\r\n* dif должен быть больше 0 */\r\nexport const getRange = (end: number, start: number = 0, dif: number = 1): number[] => {\r\n    if (dif <= 0) throw Error(\"dif должен быть больше 0\");\r\n\r\n    const range = [];\r\n\r\n    for (let i = start; i < end; i += dif) {\r\n        range.push(i);\r\n    }\r\n\r\n    return range;\r\n}\r\n\r\n/* Возвращает true, если строка является датой в формате DD.MM.YYYY */\r\nexport const checkDateFormat = (date: string): boolean => {\r\n    return date.length === 10\r\n        && date[2] === '.'\r\n        && date[5] === '.'\r\n        && !isNaN(Number(date.slice(0, 2)))\r\n        && !isNaN(Number(date.slice(3, 5)))\r\n        && !isNaN(Number(date.slice(6)))\r\n        && Number(date.slice(0, 2)) >= 0\r\n        && Number(date.slice(3, 5)) >= 0\r\n        && Number(date.slice(6)) >= 0\r\n        && Number(date.slice(0, 2)) <= 31\r\n        && Number(date.slice(3, 5)) <= 12;\r\n}"],"mappings":"AAAA;AACA,OAAO,MAAMA,iBAAiB,GAAIC,IAAD,IAAwB;EACrD,MAAMC,GAAG,GAAG,CAAC,OAAOC,MAAM,CAACF,IAAI,CAACG,OAAL,EAAD,CAAd,EAAgCC,KAAhC,CAAsC,CAAC,CAAvC,CAAZ;EACA,MAAMC,KAAK,GAAG,CAAC,OAAOH,MAAM,CAACF,IAAI,CAACM,QAAL,KAAkB,CAAnB,CAAd,EAAqCF,KAArC,CAA2C,CAAC,CAA5C,CAAd;EACA,MAAMG,IAAI,GAAG,CAAC,SAASL,MAAM,CAACF,IAAI,CAACQ,WAAL,EAAD,CAAhB,EAAsCJ,KAAtC,CAA4C,CAAC,CAA7C,CAAb;EACA,OAAQ,GAAEH,GAAI,IAAGI,KAAM,IAAGE,IAAK,EAA/B;AACH,CALM;AAOP;;AACA,OAAO,MAAME,iBAAiB,GAAIC,GAAD,IAAuB;EACpD,MAAMT,GAAG,GAAGU,MAAM,CAACD,GAAG,CAACN,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,CAAlB;EACA,MAAMC,KAAK,GAAGM,MAAM,CAACD,GAAG,CAACN,KAAJ,CAAU,CAAV,EAAa,CAAb,CAAD,CAApB;EACA,MAAMG,IAAI,GAAGI,MAAM,CAACD,GAAG,CAACN,KAAJ,CAAU,CAAV,CAAD,CAAnB;EACA,OAAO,IAAIQ,IAAJ,CAASL,IAAT,EAAeF,KAAf,EAAsBJ,GAAtB,CAAP;AACH,CALM;AAOP;AACA;;AACA,OAAO,MAAMY,QAAQ,GAAG,UAACC,GAAD,EAA+D;EAAA,IAAjDC,KAAiD,uEAAjC,CAAiC;EAAA,IAA9BC,GAA8B,uEAAhB,CAAgB;EACnF,IAAIA,GAAG,IAAI,CAAX,EAAc,MAAMC,KAAK,CAAC,0BAAD,CAAX;EAEd,MAAMC,KAAK,GAAG,EAAd;;EAEA,KAAK,IAAIC,CAAC,GAAGJ,KAAb,EAAoBI,CAAC,GAAGL,GAAxB,EAA6BK,CAAC,IAAIH,GAAlC,EAAuC;IACnCE,KAAK,CAACE,IAAN,CAAWD,CAAX;EACH;;EAED,OAAOD,KAAP;AACH,CAVM;AAYP;;AACA,OAAO,MAAMG,eAAe,GAAIrB,IAAD,IAA2B;EACtD,OAAOA,IAAI,CAACsB,MAAL,KAAgB,EAAhB,IACAtB,IAAI,CAAC,CAAD,CAAJ,KAAY,GADZ,IAEAA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAFZ,IAGA,CAACuB,KAAK,CAACZ,MAAM,CAACX,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAP,CAHN,IAIA,CAACmB,KAAK,CAACZ,MAAM,CAACX,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAP,CAJN,IAKA,CAACmB,KAAK,CAACZ,MAAM,CAACX,IAAI,CAACI,KAAL,CAAW,CAAX,CAAD,CAAP,CALN,IAMAO,MAAM,CAACX,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAN,IAA4B,CAN5B,IAOAO,MAAM,CAACX,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAN,IAA4B,CAP5B,IAQAO,MAAM,CAACX,IAAI,CAACI,KAAL,CAAW,CAAX,CAAD,CAAN,IAAyB,CARzB,IASAO,MAAM,CAACX,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAN,IAA4B,EAT5B,IAUAO,MAAM,CAACX,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAN,IAA4B,EAVnC;AAWH,CAZM"},"metadata":{},"sourceType":"module"}