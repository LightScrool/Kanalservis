{"ast":null,"code":"import { ItemKeys } from \"../types\";\nimport { checkDateFormat, getDateFromString, getStringFromDate } from \"./index\";\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField преобразованные к строке, содержат в себе value*/\n\nexport const itemFilterContains = (allItems, filterField, value) => {\n  if (filterField == ItemKeys.date) {\n    if (!checkDateFormat(value)) return [];\n    return allItems.filter(item => getStringFromDate(item[filterField]).includes(value));\n  }\n\n  return allItems.filter(item => String(item[filterField]).toLowerCase().includes(value));\n};\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField преобразованные к строке равняются value*/\n\nexport const itemFilterEquals = (allItems, filterField, value) => {\n  if (filterField == ItemKeys.date) {\n    if (!checkDateFormat(value)) return [];\n    return allItems.filter(item => getStringFromDate(item[filterField]) === value);\n  }\n\n  return allItems.filter(item => String(item[filterField]).toLowerCase() === value);\n};\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField больше, чем value*/\n\nexport const itemFilterMore = (allItems, filterField, value) => {\n  if (filterField === ItemKeys.distance || filterField === ItemKeys.quantity) {\n    if (isNaN(Number(value))) return [];\n    return allItems.filter(item => item[filterField] > Number(value));\n  }\n\n  if (filterField === ItemKeys.date) {\n    if (!checkDateFormat(value)) return [];\n    return allItems.filter(item => item.date < getDateFromString(value));\n  }\n\n  return allItems.filter(item => String(item[filterField]).toLowerCase() > value);\n};\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField меньше, чем value*/\n\nexport const itemFilterLess = (allItems, filterField, value) => {\n  if (filterField === ItemKeys.distance || filterField === ItemKeys.quantity) {\n    if (isNaN(Number(value))) return [];\n    return allItems.filter(item => item[filterField] < Number(value));\n  }\n\n  if (filterField === ItemKeys.date) {\n    if (!checkDateFormat(value)) return [];\n    return allItems.filter(item => item.date < getDateFromString(value));\n  }\n\n  return allItems.filter(item => String(item[filterField]).toLowerCase() < value);\n};\n\nconst itemFilter = (filterCondition, allItems, filterField, value) => {\n  switch (filterCondition) {\n    case \"equal\":\n      return itemFilterEquals(allItems, filterField, value);\n\n    case \"contains\":\n      return itemFilterContains(allItems, filterField, value);\n\n    case \"more\":\n      return itemFilterMore(allItems, filterField, value);\n\n    case \"less\":\n      return itemFilterLess(allItems, filterField, value);\n\n    default:\n      return allItems;\n  }\n};\n\nexport default itemFilter;","map":{"version":3,"names":["ItemKeys","checkDateFormat","getDateFromString","getStringFromDate","itemFilterContains","allItems","filterField","value","date","filter","item","includes","String","toLowerCase","itemFilterEquals","itemFilterMore","distance","quantity","isNaN","Number","itemFilterLess","itemFilter","filterCondition"],"sources":["D:/Programming/Тестовые задания/kanalservis/client/src/utils/itemFilter.ts"],"sourcesContent":["import {ItemKeys, TItem} from \"../types\";\r\nimport {checkDateFormat, getDateFromString, getStringFromDate} from \"./index\";\r\n\r\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField преобразованные к строке, содержат в себе value*/\r\nexport const itemFilterContains = (allItems: TItem[], filterField: ItemKeys, value: string): TItem[] =>{\r\n    if (filterField == ItemKeys.date) {\r\n        if (!checkDateFormat(value)) return [];\r\n        return allItems.filter((item) => getStringFromDate(item[filterField]).includes(value));\r\n    }\r\n    return allItems.filter((item) => String(item[filterField]).toLowerCase().includes(value));\r\n}\r\n\r\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField преобразованные к строке равняются value*/\r\nexport const itemFilterEquals = (allItems: TItem[], filterField: ItemKeys, value: string): TItem[] =>{\r\n    if (filterField == ItemKeys.date) {\r\n        if (!checkDateFormat(value)) return [];\r\n        return allItems.filter((item) => getStringFromDate(item[filterField]) === value);\r\n    }\r\n    return allItems.filter((item) => String(item[filterField]).toLowerCase() === value);\r\n}\r\n\r\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField больше, чем value*/\r\nexport const itemFilterMore = (allItems: TItem[], filterField: ItemKeys, value: string): TItem[] => {\r\n    if (filterField === ItemKeys.distance || filterField === ItemKeys.quantity) {\r\n        if (isNaN(Number(value))) return [];\r\n\r\n        return allItems.filter((item) => item[filterField] > Number(value))\r\n    }\r\n\r\n    if (filterField === ItemKeys.date) {\r\n        if (!checkDateFormat(value)) return [];\r\n\r\n        return allItems.filter((item) => item.date < getDateFromString(value))\r\n    }\r\n\r\n    return allItems.filter((item) => String(item[filterField]).toLowerCase() > value);\r\n}\r\n\r\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField меньше, чем value*/\r\nexport const itemFilterLess = (allItems: TItem[], filterField: ItemKeys, value: string): TItem[] => {\r\n    if (filterField === ItemKeys.distance || filterField === ItemKeys.quantity) {\r\n        if (isNaN(Number(value))) return [];\r\n\r\n        return allItems.filter((item) => item[filterField] < Number(value));\r\n    }\r\n\r\n    if (filterField === ItemKeys.date) {\r\n        if (!checkDateFormat(value)) return [];\r\n\r\n        return allItems.filter((item) => item.date < getDateFromString(value));\r\n    }\r\n\r\n    return allItems.filter((item) => String(item[filterField]).toLowerCase() < value);\r\n}\r\n\r\nconst itemFilter = (filterCondition: string, allItems: TItem[], filterField: ItemKeys, value: string): TItem[] => {\r\n    switch (filterCondition) {\r\n        case \"equal\":\r\n            return itemFilterEquals(allItems, filterField, value);\r\n\r\n        case \"contains\":\r\n            return itemFilterContains(allItems, filterField, value);\r\n\r\n        case \"more\":\r\n            return  itemFilterMore(allItems, filterField, value);\r\n\r\n        case \"less\":\r\n            return itemFilterLess(allItems, filterField, value);\r\n\r\n            default:\r\n            return allItems;\r\n    }\r\n}\r\n\r\nexport default itemFilter;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}