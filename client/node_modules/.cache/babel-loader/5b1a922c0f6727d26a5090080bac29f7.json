{"ast":null,"code":"import { ItemKeys } from \"../types\";\nimport { checkDateFormat, getDateFromString } from \"./index\";\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField больше, чем value*/\n\nexport const itemFilterMore = (allItems, filterField, value) => {\n  if (filterField === ItemKeys.distance || filterField === ItemKeys.quantity) {\n    if (isNaN(Number(value))) return [];\n    return allItems.filter(item => item[filterField] > Number(value));\n  }\n\n  if (filterField === ItemKeys.date) {\n    if (!checkDateFormat(value)) return [];\n    return allItems.filter(item => item.date < getDateFromString(value));\n  }\n\n  return allItems.filter(item => String(item[filterField]).toLowerCase() > value);\n};\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField меньше, чем value*/\n\nexport const itemFilterLess = (allItems, filterField, value) => {\n  if (filterField === ItemKeys.distance || filterField === ItemKeys.quantity) {\n    if (isNaN(Number(value))) return [];\n    return allItems.filter(item => item[filterField] < Number(value));\n  }\n\n  if (filterField === ItemKeys.date) {\n    if (!checkDateFormat(value)) return [];\n    return allItems.filter(item => item.date < getDateFromString(value));\n  }\n\n  return allItems.filter(item => String(item[filterField]).toLowerCase() < value);\n};","map":{"version":3,"names":["ItemKeys","checkDateFormat","getDateFromString","itemFilterMore","allItems","filterField","value","distance","quantity","isNaN","Number","filter","item","date","String","toLowerCase","itemFilterLess"],"sources":["D:/Programming/Тестовые задания/kanalservis/client/src/utils/itemFilters.ts"],"sourcesContent":["import {ItemKeys, TItem} from \"../types\";\r\nimport {checkDateFormat, dateCompareMore, getDateFromString, getStringFromDate} from \"./index\";\r\n\r\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField больше, чем value*/\r\nexport const itemFilterMore = (allItems: TItem[], filterField: ItemKeys, value: string) => {\r\n    if (filterField === ItemKeys.distance || filterField === ItemKeys.quantity) {\r\n        if (isNaN(Number(value))) return [];\r\n\r\n        return allItems.filter((item) => item[filterField] > Number(value))\r\n    }\r\n\r\n    if (filterField === ItemKeys.date) {\r\n        if (!checkDateFormat(value)) return [];\r\n\r\n        return allItems.filter((item) => item.date < getDateFromString(value))\r\n    }\r\n\r\n    return allItems.filter((item) => String(item[filterField]).toLowerCase() > value);\r\n}\r\n\r\n/* Возвращает новый массив: allItems отфильтрованный так, что\r\n* все элементы по полю filterField меньше, чем value*/\r\nexport const itemFilterLess = (allItems: TItem[], filterField: ItemKeys, value: string) => {\r\n    if (filterField === ItemKeys.distance || filterField === ItemKeys.quantity) {\r\n        if (isNaN(Number(value))) return [];\r\n\r\n        return allItems.filter((item) => item[filterField] < Number(value))\r\n    }\r\n\r\n    if (filterField === ItemKeys.date) {\r\n        if (!checkDateFormat(value)) return [];\r\n\r\n        return allItems.filter((item) => item.date < getDateFromString(value))\r\n    }\r\n\r\n    return allItems.filter((item) => String(item[filterField]).toLowerCase() < value);\r\n}"],"mappings":"AAAA,SAAQA,QAAR,QAA8B,UAA9B;AACA,SAAQC,eAAR,EAA0CC,iBAA1C,QAAqF,SAArF;AAEA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAoBC,WAApB,EAA2CC,KAA3C,KAA6D;EACvF,IAAID,WAAW,KAAKL,QAAQ,CAACO,QAAzB,IAAqCF,WAAW,KAAKL,QAAQ,CAACQ,QAAlE,EAA4E;IACxE,IAAIC,KAAK,CAACC,MAAM,CAACJ,KAAD,CAAP,CAAT,EAA0B,OAAO,EAAP;IAE1B,OAAOF,QAAQ,CAACO,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACP,WAAD,CAAJ,GAAoBK,MAAM,CAACJ,KAAD,CAApD,CAAP;EACH;;EAED,IAAID,WAAW,KAAKL,QAAQ,CAACa,IAA7B,EAAmC;IAC/B,IAAI,CAACZ,eAAe,CAACK,KAAD,CAApB,EAA6B,OAAO,EAAP;IAE7B,OAAOF,QAAQ,CAACO,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,IAAL,GAAYX,iBAAiB,CAACI,KAAD,CAAvD,CAAP;EACH;;EAED,OAAOF,QAAQ,CAACO,MAAT,CAAiBC,IAAD,IAAUE,MAAM,CAACF,IAAI,CAACP,WAAD,CAAL,CAAN,CAA0BU,WAA1B,KAA0CT,KAApE,CAAP;AACH,CAdM;AAgBP;AACA;;AACA,OAAO,MAAMU,cAAc,GAAG,CAACZ,QAAD,EAAoBC,WAApB,EAA2CC,KAA3C,KAA6D;EACvF,IAAID,WAAW,KAAKL,QAAQ,CAACO,QAAzB,IAAqCF,WAAW,KAAKL,QAAQ,CAACQ,QAAlE,EAA4E;IACxE,IAAIC,KAAK,CAACC,MAAM,CAACJ,KAAD,CAAP,CAAT,EAA0B,OAAO,EAAP;IAE1B,OAAOF,QAAQ,CAACO,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACP,WAAD,CAAJ,GAAoBK,MAAM,CAACJ,KAAD,CAApD,CAAP;EACH;;EAED,IAAID,WAAW,KAAKL,QAAQ,CAACa,IAA7B,EAAmC;IAC/B,IAAI,CAACZ,eAAe,CAACK,KAAD,CAApB,EAA6B,OAAO,EAAP;IAE7B,OAAOF,QAAQ,CAACO,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACC,IAAL,GAAYX,iBAAiB,CAACI,KAAD,CAAvD,CAAP;EACH;;EAED,OAAOF,QAAQ,CAACO,MAAT,CAAiBC,IAAD,IAAUE,MAAM,CAACF,IAAI,CAACP,WAAD,CAAL,CAAN,CAA0BU,WAA1B,KAA0CT,KAApE,CAAP;AACH,CAdM"},"metadata":{},"sourceType":"module"}