{"ast":null,"code":"/* Возвращает строку в формате DD.MM.YYYY из объекта Date*/\nexport const getStringFromDate = date => {\n  const day = date.getDay();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n};\n/* Возвращает массив с числами от start до end с шагом dif\r\n* dif должен быть больше 0 */\n\nexport const getRange = function (end) {\n  let start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let dif = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (dif <= 0) throw Error(\"dif должен быть больше 0\");\n  const range = [];\n\n  for (let i = start; i < end; i += dif) {\n    range.push(i);\n  }\n\n  return range;\n};\n/* Возвращает true, если строка является датой в формате DD.MM.YYYY */\n\nexport const checkDateFormat = date => {\n  return date.length === 10 && date[2] === '.' && date[5] === '.' && !isNaN(Number(date.slice(0, 2))) && !isNaN(Number(date.slice(3, 5))) && !isNaN(Number(date.slice(6))) && Number(date.slice(0, 2)) >= 0 && Number(date.slice(3, 5)) >= 0 && Number(date.slice(6, 9)) >= 0 && Number(date.slice(0, 2)) <= 31 && Number(date.slice(3, 5)) <= 12;\n};\n/* Возвращает true, если первая дата больше второй. В обратном случае - возвращает false */\n\nexport const dateCompareMore = (a, b) => {\n  if (a.slice(6) !== b.slice(6)) return Number(a.slice(6)) > Number(b.slice(6));\n  if (a.slice(3, 5) !== b.slice(3, 5)) return Number(a.slice(3, 5)) > Number(b.slice(3, 5));\n  return Number(a.slice(0, 2)) > Number(b.slice(0, 2));\n};","map":{"version":3,"names":["getStringFromDate","date","day","getDay","month","getMonth","year","getFullYear","getRange","end","start","dif","Error","range","i","push","checkDateFormat","length","isNaN","Number","slice","dateCompareMore","a","b"],"sources":["D:/Programming/Тестовые задания/kanalservis/client/src/utils/index.ts"],"sourcesContent":["/* Возвращает строку в формате DD.MM.YYYY из объекта Date*/\r\nexport const getStringFromDate = (date: Date): string => {\r\n    const day = date.getDay();\r\n    const month = date.getMonth() + 1;\r\n    const year = date.getFullYear();\r\n    return `${day}.${month}.${year}`;\r\n}\r\n\r\n/* Возвращает массив с числами от start до end с шагом dif\r\n* dif должен быть больше 0 */\r\nexport const getRange = (end: number, start: number = 0, dif: number = 1): number[] => {\r\n    if (dif <= 0) throw Error(\"dif должен быть больше 0\");\r\n\r\n    const range = [];\r\n\r\n    for (let i = start; i < end; i += dif) {\r\n        range.push(i);\r\n    }\r\n\r\n    return range;\r\n}\r\n\r\n/* Возвращает true, если строка является датой в формате DD.MM.YYYY */\r\nexport const checkDateFormat = (date: string): boolean => {\r\n    return date.length === 10\r\n        && date[2] === '.'\r\n        && date[5] === '.'\r\n        && !isNaN(Number(date.slice(0, 2)))\r\n        && !isNaN(Number(date.slice(3, 5)))\r\n        && !isNaN(Number(date.slice(6)))\r\n        && Number(date.slice(0, 2)) >= 0\r\n        && Number(date.slice(3, 5)) >= 0\r\n        && Number(date.slice(6, 9)) >= 0\r\n        && Number(date.slice(0, 2)) <= 31\r\n        && Number(date.slice(3, 5)) <= 12;\r\n}\r\n\r\n/* Возвращает true, если первая дата больше второй. В обратном случае - возвращает false */\r\nexport const dateCompareMore = (a: string, b: string): boolean => {\r\n    if (a.slice(6) !== b.slice(6)) return Number(a.slice(6)) > Number(b.slice(6));\r\n    if (a.slice(3, 5) !== b.slice(3, 5)) return Number(a.slice(3, 5)) > Number(b.slice(3, 5));\r\n    return Number(a.slice(0, 2)) > Number(b.slice(0, 2));\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}